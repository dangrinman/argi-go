// <auto-generated />
using ArgiGo.Database.Mapping;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArgiGo.Migrations
{
    [DbContext(typeof(ArgiGoContext))]
    [Migration("20231009162538_secondMigration")]
    partial class secondMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArgiGo.Model.Entities.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("ArgiGo.Model.Entities.Chapter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Chapter", (string)null);
                });

            modelBuilder.Entity("ArgiGo.Model.Entities.Doushi", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JishoKei")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kanji")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KanoKei")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NaiKei")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Negative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NegativePast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Past")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Present")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaKei")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeKei")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Kanji")
                        .IsUnique();

                    b.ToTable("Doushi", (string)null);
                });

            modelBuilder.Entity("ArgiGo.Model.Entities.Exam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exam", (string)null);
                });

            modelBuilder.Entity("ArgiGo.Model.Entities.Example", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DoushiId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FukushiId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KeiyoushiId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MeishiId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoushiId");

                    b.HasIndex("FukushiId");

                    b.HasIndex("KeiyoushiId");

                    b.HasIndex("MeishiId");

                    b.ToTable("Example", (string)null);
                });

            modelBuilder.Entity("ArgiGo.Model.Entities.Fukushi", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Kanji")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Kanji")
                        .IsUnique();

                    b.ToTable("Fukushi", (string)null);
                });

            modelBuilder.Entity("ArgiGo.Model.Entities.Keiyoushi", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Kanji")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KeiyoushiType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Negative")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NegativePast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Past")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Present")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Kanji")
                        .IsUnique();

                    b.ToTable("Keiyoushi", (string)null);
                });

            modelBuilder.Entity("ArgiGo.Model.Entities.Meishi", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Kanji")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Kanji")
                        .IsUnique();

                    b.ToTable("Meishi", (string)null);
                });

            modelBuilder.Entity("ChapterDoushi", b =>
                {
                    b.Property<string>("ChaptersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DoushiId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChaptersId", "DoushiId");

                    b.HasIndex("DoushiId");

                    b.ToTable("ChapterDoushi");
                });

            modelBuilder.Entity("ChapterFukushi", b =>
                {
                    b.Property<string>("ChaptersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FukushiId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChaptersId", "FukushiId");

                    b.HasIndex("FukushiId");

                    b.ToTable("ChapterFukushi");
                });

            modelBuilder.Entity("ChapterKeiyoushi", b =>
                {
                    b.Property<string>("ChaptersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KeiyoushiId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChaptersId", "KeiyoushiId");

                    b.HasIndex("KeiyoushiId");

                    b.ToTable("ChapterKeiyoushi");
                });

            modelBuilder.Entity("ChapterMeishi", b =>
                {
                    b.Property<string>("ChaptersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MeishiId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChaptersId", "MeishiId");

                    b.HasIndex("MeishiId");

                    b.ToTable("ChapterMeishi");
                });

            modelBuilder.Entity("DoushiExam", b =>
                {
                    b.Property<string>("DoushiId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExamsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DoushiId", "ExamsId");

                    b.HasIndex("ExamsId");

                    b.ToTable("DoushiExam");
                });

            modelBuilder.Entity("ExamFukushi", b =>
                {
                    b.Property<string>("ExamsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FukushiId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ExamsId", "FukushiId");

                    b.HasIndex("FukushiId");

                    b.ToTable("ExamFukushi");
                });

            modelBuilder.Entity("ExamKeiyoushi", b =>
                {
                    b.Property<string>("ExamsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KeiyoushiId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ExamsId", "KeiyoushiId");

                    b.HasIndex("KeiyoushiId");

                    b.ToTable("ExamKeiyoushi");
                });

            modelBuilder.Entity("ExamMeishi", b =>
                {
                    b.Property<string>("ExamsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MeishiId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ExamsId", "MeishiId");

                    b.HasIndex("MeishiId");

                    b.ToTable("ExamMeishi");
                });

            modelBuilder.Entity("ArgiGo.Model.Entities.Chapter", b =>
                {
                    b.HasOne("ArgiGo.Model.Entities.Book", "Book")
                        .WithMany("Chapters")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ArgiGo.Model.Entities.Example", b =>
                {
                    b.HasOne("ArgiGo.Model.Entities.Doushi", "Doushi")
                        .WithMany("Examples")
                        .HasForeignKey("DoushiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ArgiGo.Model.Entities.Fukushi", "Fukushi")
                        .WithMany("Examples")
                        .HasForeignKey("FukushiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ArgiGo.Model.Entities.Keiyoushi", "Keiyoushi")
                        .WithMany("Examples")
                        .HasForeignKey("KeiyoushiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ArgiGo.Model.Entities.Meishi", "Meishi")
                        .WithMany("Examples")
                        .HasForeignKey("MeishiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Doushi");

                    b.Navigation("Fukushi");

                    b.Navigation("Keiyoushi");

                    b.Navigation("Meishi");
                });

            modelBuilder.Entity("ChapterDoushi", b =>
                {
                    b.HasOne("ArgiGo.Model.Entities.Chapter", null)
                        .WithMany()
                        .HasForeignKey("ChaptersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArgiGo.Model.Entities.Doushi", null)
                        .WithMany()
                        .HasForeignKey("DoushiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChapterFukushi", b =>
                {
                    b.HasOne("ArgiGo.Model.Entities.Chapter", null)
                        .WithMany()
                        .HasForeignKey("ChaptersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArgiGo.Model.Entities.Fukushi", null)
                        .WithMany()
                        .HasForeignKey("FukushiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChapterKeiyoushi", b =>
                {
                    b.HasOne("ArgiGo.Model.Entities.Chapter", null)
                        .WithMany()
                        .HasForeignKey("ChaptersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArgiGo.Model.Entities.Keiyoushi", null)
                        .WithMany()
                        .HasForeignKey("KeiyoushiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChapterMeishi", b =>
                {
                    b.HasOne("ArgiGo.Model.Entities.Chapter", null)
                        .WithMany()
                        .HasForeignKey("ChaptersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArgiGo.Model.Entities.Meishi", null)
                        .WithMany()
                        .HasForeignKey("MeishiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoushiExam", b =>
                {
                    b.HasOne("ArgiGo.Model.Entities.Doushi", null)
                        .WithMany()
                        .HasForeignKey("DoushiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArgiGo.Model.Entities.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamFukushi", b =>
                {
                    b.HasOne("ArgiGo.Model.Entities.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArgiGo.Model.Entities.Fukushi", null)
                        .WithMany()
                        .HasForeignKey("FukushiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamKeiyoushi", b =>
                {
                    b.HasOne("ArgiGo.Model.Entities.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArgiGo.Model.Entities.Keiyoushi", null)
                        .WithMany()
                        .HasForeignKey("KeiyoushiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamMeishi", b =>
                {
                    b.HasOne("ArgiGo.Model.Entities.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArgiGo.Model.Entities.Meishi", null)
                        .WithMany()
                        .HasForeignKey("MeishiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArgiGo.Model.Entities.Book", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("ArgiGo.Model.Entities.Doushi", b =>
                {
                    b.Navigation("Examples");
                });

            modelBuilder.Entity("ArgiGo.Model.Entities.Fukushi", b =>
                {
                    b.Navigation("Examples");
                });

            modelBuilder.Entity("ArgiGo.Model.Entities.Keiyoushi", b =>
                {
                    b.Navigation("Examples");
                });

            modelBuilder.Entity("ArgiGo.Model.Entities.Meishi", b =>
                {
                    b.Navigation("Examples");
                });
#pragma warning restore 612, 618
        }
    }
}
